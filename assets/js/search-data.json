{
  
    
        "post0": {
            "title": "John Conways' game of life in python",
            "content": "John Conways’ game of life in python . . This small project represents the python Implementation of John Conways’ game of life, if you don’t know what I’m talking about stick with me, I’ll explain everything from idea to implementation. . Project repo: Game Of Life . : . John Conways’ game of life in python What is the game of life | Motivation | Implementation Engine | Interface | | Conclusion Next Steps: | | | What is the game of life . According to Wikipedia the game of life is in simple terms a game that mimics the behavior and lifecycle of biological cells in nature following 4 simple rules: . Any live cell with fewer than two live neighbours dies, as if by underpopulation. | Any live cell with two or three live neighbours lives on to the next generation. | Any live cell with more than three live neighbours dies, as if by overpopulation. | Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction. | Out of these simple rules we can create starting configurations that lead to complex systems and shapes like oscillators, spaceships and even turing machines . Motivation . I was glad that I stumbled upon a great talk on youtube called The Art of Code which I highly recommend watching it. Dylan Beattie is a programmer and musician talked about different beautiful artistic moments of coding and what coders have achieved from writing mesmerizing quines to coming up with weird but funny programming languages like Rockstar programming language but what has really caught my attention is talking about the game of life which made my jaw drop and let me think very deeply about its capabilities. At this moment I knew nothing about it and suddenly had the urge to implement it in my favourite programming language (python) . Implementation . Engine . At this point I have no idea how to implement this graphically so I started first by creating a Grid class which represents our infinte 2d space. This grid is in fact a 2d array which translates to a nested list in python. our grid of length w and width h is initialized by w*h zeros when called. . . N.B: 0 means that the cell is dead and 1 is alive class Grid: . import random class Grid(list): def __init__(self, w, h): &quot;&quot;&quot; initializes a grid of zeros with length w and width h &quot;&quot;&quot; self.w = w self.h = h super() for row in range(w): # Add an empty array that will hold each cell # in this row self.append([]) for column in range(h): self[row].append(0) # Append a cell def show(self): for row in range(self.w): ch=&#39;[&#39; for col in range(self.h): ch += str(self[row][col])+&#39;,&#39; if col == self.h-1: ch=ch[:-1]+&#39;]&#39; print(ch,&#39; n&#39;) . Example: . grid = Grid(5,5) grid.show() . Output: . [0,0,0] . [0,0,0] . [0,0,0] . Now that we have defined and created our data structure the next task is to define a function to calculate the number of alive neighbors for each cell of position x,y by visiting its next eight neighbors and summing up their values. . def alive_neighbors(self,x,y): &quot;&quot;&quot; returns the number of alive neighbors (=1) for a certain x,y position &quot;&quot;&quot; res = 0 for row in range(x-1,x+2): for col in range(y-1,y+2): if (row==x) and (col==y): continue try: if self[row][col] == 1: res+=1 pass except IndexError:#If this error is raised for cells on the edges we consider the next edge cells are the neighbors, like we are wrapping a sheet of paper so the edges touch row = (x+row+self.w)%self.w col = (y+col+self.h)%self.h return res . Example: . [0,1,0] . [0,0,0] . [1,1,1] . neighbors = grid.alive_neighbors(1,1) # cell in position 1,1 print(neighbors) . Output: 4 which is the sum of neighbor alive cells . Before thinking about gui we have to try it on terminal and see if everything works fine. We start by making a grid and choose starting configuration, get each cell’s state and update it in next_grid, after looping through all cells we print the updated version (next_grid) and each loop through the grid represnts a new generation of cells. . test.py . from grid import Grid grid = Grid(3,5) grid[1][1] = 1 grid[1][2] = 1 grid[1][3] = 1 if __name__ == &#39;__main__&#39;: grid.show() next_grid = Grid(3,5) for row in range(3): for col in range(5): state = grid[row][col] #get every element&#39;s neighbors of grid neighbors = grid.alive_neighbors(row,col) if neighbors == 3 and state ==0 :# These are the first 3 rules stated above next_grid[row][col] = 1 elif (neighbors&lt;2 or neighbors&gt;3) and state ==1 : # This is the last rule of game of life next_grid[row][col] = 0 else: next_grid[row][col] = state print(&#39;=&#39;*10) next_grid.show() grid = next_grid . Output: this is the representation of an oscillator . [0,0,0,0,0] ===&gt; [0,0,1,0,0] . [0,1,1,1,0] ===&gt; [0,0,1,0,0] . [0,0,0,0,0] ===&gt; [0,0,1,0,0] . Interface . For the gui I decided to use pygame for its simplicity and powerful functionalities, we start by defining some global variables. . # Define some colors BLACK = (0, 0, 0) WHITE = (255, 255, 255) GREEN = (0, 255, 0) RED = (255, 0, 0) # This sets the WIDTH and HEIGHT of each grid location SQUARE = 20 # This sets the margin between each cell MARGIN = 2 #Screen resolution w = 700 h = 500 #calculate row_num, col_num from current resolution row_num = w//SQUARE col_num = h//SQUARE . Next define the draw method which represents our grid of zeros and ones by graphical squares of white color if dead and green color if alive: . #def initialize grid def draw_grid(row_num, col_num, g): # Draw the grid for row in range(row_num): for column in range(col_num): color = WHITE pygame.draw.rect(screen, color, [(MARGIN + SQUARE) * row + MARGIN, (MARGIN + SQUARE) * column + MARGIN, SQUARE, SQUARE]) if g[row][column] == 1: pygame.draw.rect(screen, GREEN, [(MARGIN + SQUARE) * row + MARGIN, (MARGIN + SQUARE) * column + MARGIN, SQUARE, SQUARE]) pygame.display.flip() . Then we have to create a window of size w,h and draw initial grid . def create_window(w, h): # Set the HEIGHT and WIDTH of the screen screen = pygame.display.set_mode([w,h]) # Set title of screen pygame.display.set_caption(&quot;John Conway&#39;s game of life&quot;) return screen #create window of size 700px by 500px screen = create_window(w, h) #draw initial grid draw_grid(row_num, col_num, grid) . The final step is defining the main loop to keep the game running and see some magic patterns, once we press the space key we apply the same rules on the grid like we did on the first prototype of the game and draw each new generation of cells to the screen of our window. . # -- Main Program Loop -- while not done: for event in pygame.event.get(): # User did something if event.type == pygame.QUIT: # If user clicked close done = True # Flag that we are done so we exit this loop elif event.type == pygame.KEYDOWN: # Game starts if event.key == K_SPACE: print(&#39;space key pressed&#39;) x = 0 while True: next_grid = Grid(row_num, col_num) for row in range(row_num): for col in range(col_num): state = grid[row][col]#current grid state 0 or 1 neighbors = grid.alive_neighbors(row,col)#current grid alive neighbors if state == 1 and (neighbors&lt;2 or neighbors&gt;3): next_grid[row][col] = 0 elif state == 0 and neighbors == 3: next_grid[row][col] = 1 else: next_grid[row][col] = state draw_grid(row_num, col_num, next_grid) grid = next_grid x+=1 print(&#39;generation:&#39;,x) # Limit to x frames per second clock.tick(x) # Be IDLE friendly. If you forget this line, the program will &#39;hang&#39; # on exit. pygame.quit() . Final Result of a random config: . . Conclusion . I had so fun working on this project and I hope it helps you because at first place I did not find a good python implementation of this project. . Next Steps: . Add drawing functionality by mouse, so you can choose easily the starting config (done) | I think of optimizing the game by using numpy instead of grid (done) | Make an interactive web app of it using flask and deploy it | . Go back up .",
            "url": "/Blog/programming/2020/03/21/gameoflife.html",
            "relUrl": "/programming/2020/03/21/gameoflife.html",
            "date": " • Mar 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About . Fares Lassoued, 23 yo from Tunisia. I’m a cs graduate with interest in Data science, so I’m teaching myself to be a better coder, data scientist and a good problem solver! . You can find me on: . Linekedin | Github | Kaggle | Quora | .",
          "url": "/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}